This page is for formatting only

Amazon Q Developer is a generative artificial intelligence (AI) powered conversational assistant that can help you understand, build, extend, and operate AWS applications. You can ask questions about AWS architecture, your AWS resources, best practices, documentation, support, and more. Amazon Q is constantly updating its capabilities so your questions get the most contextually relevant and actionable answers. 

When used in an integrated development environment (IDE), Amazon Q provides software development assistance. Amazon Q can chat about code, provide inline code completions, generate net new code, scan your code for security vulnerabilities, and make code upgrades and improvements, such as language updates, debugging, and optimizations.

To get started with Amazon Q Developer, you need to install it as an extension in Visual Studio Code or a plugin in JetBrains. You can also use it in the AWS Toolkit for Visual Studio. 

Here's how you can use Amazon Q Developer's inline code suggestions in your Amplify project:

1. Open `amplify/data/resource.ts` and comment out the default schema for Todo provided.
2. In a new line below the commented schema, enter a comment to generate the schema using natural language. For example, `generate a restaurant model with the following fields: id, name, description, address, image, rating, style. Rating can be a float value. Authorization should allow public.` Press `Enter` for a new line and wait for Amazon Q Developer to generate inline code suggestion for your schema.
3. Select the inline code suggestion generated by Amazon Q developer. The inline code suggestion feature assists you in defining the schema and hover over the output to select from other options.
4. Make any required changes to the schema and save the `amplify/data/resource.ts` file. This will trigger a sandbox deployment and your new data model will be deployed.

You can also use Amazon Q Developer's workspace feature in your Amplify project. This feature allows you to incorporate the most relevant parts of your workspace code as context, using an index that updates periodically. 

To use the workspace feature, you need to download some markdown files that provide detailed guides on how to use Amazon Q Developer in your Amplify project. These files include `general.md`, `authentication.md`, `modeling-relationships.md`, and `modeling-schema.md`. 

Here's how you can use the workspace feature:

1. Create a folder in the root of your project and give a descriptive name such as `context`. Add the downloaded markdown files to this folder.
2. Open Amazon Q Developer Chat in your IDE and type `@workspace` to enable workspace indexing. Follow Amazon Q's prompts to set up indexing for your project directory.
3. After successful indexing, reference the markdown file content in your queries to Amazon Q. For example, you can type `@workspace follow AMPLIFYRULES to develop a data model schema for a freelance marketplace using Amplify Gen 2. Include models for freelancers, clients, projects, bids, and reviews. Use Amplify Gen 2 to fetch a list of projects` to get a data model schema for a freelance marketplace. 

You can also trigger the inline code suggestion feature manually by invoking Amazon Q Developer using the Option+C keyboard shortcut in VS Code.

When deploying an AWS Amplify Gen 2 app, you may encounter the error message "Cannot find module $amplify/env/<function-name>" in your frontend build on Amplify Console. This error occurs when your framework tsconfig.json configuration picks up the amplify directory and tries to resolve it as a module. This module is a placeholder for environment variables that are injected at build time by Amplify. To resolve this error, you need to exclude the amplify directory.

To exclude the amplify directory in your tsconfig.json, add the following lines to the exclude section:
```ts
{
  "exclude": ["amplify/**/*"]
}
```
Amplify will perform type-checking on sandbox and pipeline-deploy using the tsconfig local to the Amplify backend amplify/tsconfig.json. If you'd like to extend your base configuration you can add it to the localized tsconfig.

Alternatively, if you work within a monorepo you can move your backend to its own package and export the Schema and outputs for ease of sharing with your other apps. For example, in your backend package's package.json:
```json
{
  "name": "my-backend",
  "private": true,
  "exports": {
    "./schema": "./amplify/data/resource.ts",
    "./outputs": "./amplify_outputs.json"
  }
}
```
However, if you are using Vue, you will need to include the resource.ts files in your tsconfig.app.json file instead. For example, if you have a function resource dependent on the data resource, you will need to include both the resource.ts files in your tsconfig.app.json file:
```ts
{
  "include": [
    "amplify/data/resource.ts",
    "amplify/function/api-function/resource.ts",
  ]
}
```

To deploy resources into your AWS account using AWS Amplify, you need to prepare your AWS environment by bootstrapping it. This process involves setting up your AWS account and region to work with the AWS Cloud Development Kit (AWS CDK), which is used by Amplify to scaffold backend resource configurations and deployments.

Bootstrapping is a necessary step before deploying a CDK stack into your AWS environment. You can learn more about bootstrapping by visiting the AWS documentation.

When deploying an Amplify app, you may encounter an error message indicating that there is an issue with the CDKToolkit stack. This typically means that one or more resources within the stack has failed to create or update. To resolve this issue, you can navigate to the AWS CloudFormation console, select your CDKToolkit stack, and view the resource events to identify any problems.

You can fix the issue by manually updating your CDKToolkit stack using the AWS CloudShell or by running the bootstrap command using the AWS CDK CLI from your terminal. The command to update the stack is 
```bash
npx aws-cdk@latest bootstrap aws://<your-aws-account-id>/<your-aws-region>
```
If you continue to experience issues after applying this workaround, you should file an issue in the GitHub repository for Amplify Backend.

Another common error is the "Stack CDKToolkit already exists" error, which occurs when you are deploying an Amplify app for the first time and have previously bootstrapped your AWS account to work with CDK. To resolve this issue, you can also manually update your CDKToolkit stack using the AWS CloudShell or by running the bootstrap command using the AWS CDK CLI from your terminal. The command to update the stack is 
```bash
npx aws-cdk@latest bootstrap aws://<your-aws-account-id>/<your-aws-region>
```
If you continue to experience issues after applying this workaround, you should file an issue in the GitHub repository for Amplify Backend.

When deploying an Amplify Gen 2 app, you may encounter the error message "The CloudFormation deployment failed due to circular dependency" in your backend build on Amplify Console or while running a sandbox. This error occurs due to circular dependencies between CloudFormation nested stacks or between resources in a single CloudFormation stack.

If you see an error message indicating a circular dependency between nested stacks, it means that two or more nested stacks are dependent on each other. For example, if you're using a function as a query handler, but the function also needs access to the data API, you might run into this issue. To resolve this, group the function with other resources in the same stack. 

For instance, in React, if you have a query function, you can group it with other resources in the data stack by defining the function like this:
```javascript
export const queryFunction = {
  name: 'query-function',
  resourceGroupName: 'data',
};
```
Similarly, if you're using your function as an auth trigger, you can group your function with other resources in the auth stack to break the circular dependency.
```javascript
export const preSignUpTrigger = {
  name: 'pre-sign-up',
  resourceGroupName: 'auth',
};
```
If you're unable to resolve the error using the function's resourceGroupName property, you should create an issue on the GitHub repository for Amplify backend.

If you're creating resources using the AWS Cloud Development Kit (AWS CDK) and assigning them to a custom stack, you might also encounter a circular dependency error. To resolve this, try creating your resources in the same stack as the resources you're trying to interact with. For example, if a custom resource such as sqs needs to interact with the underlying Amazon S3 resource created by defineStorage, you can create that sqs resource in the stack created by Amplify.
```javascript
const queue = new sqs.Queue(backend.storage.stack, 'MyCustomQueue');
```
If you see an error message indicating a circular dependency between resources in the same stack, review the AWS Blog post for handling circular dependency errors for guidance on resolving the issue.

If you're experiencing missing configuration or `NoCredentials` error messages in your React application, even after calling `Amplify.configure`, it's likely that your Amplify API is being called before `Amplify.configure`. This can happen in several ways, and here are three possible checks to troubleshoot the issue.

First, ensure that `Amplify.configure` is called in the root file of your project. The root file varies depending on your frontend framework. For React, it's usually `src/main.tsx`. Make sure you're calling `Amplify.configure` in this file.

If you're using Next.js App Router, follow the suggestions in the Next.js documentation for root-level configuration. Be aware that if you're calling any APIs at the module-level (i.e., at the top of your file) in any child components, you may still run into this issue.

Second, move any module-level Amplify API invocations. When Amplify APIs are used outside of your application lifecycle, there's a risk that the JavaScript bundler may place that API call before `Amplify.configure`. This can happen when you have code like this:

```tsx
import { Amplify } from 'aws-amplify';
import ComponentX from 'module-fetch-auth';

Amplify.configure();

export default function App() {
  return (
    <div>
        <ComponentX />
    </div>
  );
}
```

```tsx
import { fetchAuthSession } from 'aws-amplify/auth';

fetchAuthSession(); // Will throw "AuthUserPoolException: Auth UserPool not configured."

export default function ComponentX() {
  return (
    <div className="box">
     ...
    </div>
  );
}
```

To fix this, move the Amplify API calls to within the application lifecycle. For instance, you can use the `useEffect` hook in React:

```tsx
import { Amplify } from 'aws-amplify';
import ComponentX from 'module-fetch-auth';

Amplify.configure();

export default function App() {
  return (
    <div>
        <ComponentX />
    </div>
  );
}
```

```tsx
import { type AuthSession, fetchAuthSession } from 'aws-amplify/auth';
import { useEffect, useState } from 'react';

export default function ComponentX() {
  const [session, setSession] = useState<AuthSession|undefined>();

  const getSession = async () => {
    try {
      const currentSession = await fetchAuthSession();
      setSession(currentSession);
    } catch (error: unknown) {
      console.log(error);
    }
  };

  useEffect(() => {
    getSession();
  }, []);

  return (
    <div className="box">
     ...
    </div>
  );
}
```

Lastly, if you're working in a multi-page app, you need to call `Amplify.configure()` for each page/route of your application. You can do this by calling `Amplify.configure` in a common source file and importing it into each page. This ensures that Amplify is properly configured for each page in your application.

The AWS Mobile Client and Amplify Android v2 are not compatible with each other. Amplify v2 migrates the credentials from AWS Mobile Client into a different format, leaving AWS Mobile Client unable to read the credentials. If AWS Mobile Client is launched after this migration has taken place, the Amplify v2 credentials will also be cleared.

To use Amplify v2 with the AWS Android SDK, you need to create an AmplifyCredentialsProvider that provides credentials to the AWS Android SDK plugins. This provider uses Amplify Android v2 to provide credentials.

Here is an example of how to create an AmplifyCredentialsProvider in React Native using JavaScript:
```
class AmplifyCredentialsProvider {
  async getCredentials() {
    try {
      const authSession = await Amplify.Auth.fetchAuthSession();
      const awsCredentials = authSession.getAwsCredentials();
      if (awsCredentials) {
        return {
          accessKeyId: awsCredentials.accessKeyId,
          secretAccessKey: awsCredentials.secretAccessKey,
          sessionToken: awsCredentials.sessionToken,
        };
      } else {
        throw new Error('Failed to get credentials');
      }
    } catch (error) {
      throw new Error('Failed to get credentials');
    }
  }

  async refresh() {
    try {
      await Amplify.Auth.fetchAuthSession({ forceRefresh: true });
    } catch (error) {
      throw new Error('Failed to refresh credentials');
    }
  }
}
```
You can then use this provider with AWS Android SDK plugins that accept an AWSCredentialsProvider.

For example, to use the S3 Storage plugin, you can create a TransferUtility instance like this:
```
const amplifyCredentialsProvider = new AmplifyCredentialsProvider();
const transferUtility = new TransferUtility({
  context: this,
  awsConfiguration: new AWSConfiguration(this),
  s3Client: new AmazonS3Client(amplifyCredentialsProvider, 'us-east-1'),
});
```
Similarly, you can use the IoT plugin like this:
```
const amplifyCredentialsProvider = new AmplifyCredentialsProvider();
const iotClient = new AWSIotClient(amplifyCredentialsProvider);
```
And the Android SDK generated by API Gateway like this:
```
const amplifyCredentialsProvider = new AmplifyCredentialsProvider();
const clientFactory = new ApiClientFactory();
clientFactory.credentialsProvider(amplifyCredentialsProvider);
```
Note that you need to ensure that the resources are in sync between the `amplify_outputs.json` file used by Amplify v2 and the `awsconfiguration.json` file used by the AWS Android SDK. Any manual customizations should be applied to both files.