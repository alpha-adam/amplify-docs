To use Amplify Auth and Data APIs from Next.js server-side runtimes, you need to install the Amplify Next.js adapter in addition to the Amplify libraries. You can do this by running the command `npm add aws-amplify @aws-amplify/adapter-nextjs` in your terminal.

Next, you need to configure Amplify APIs for server-side usage by creating a `runWithAmplifyServerContextRunner` function. This function is used to call Amplify APIs on the server-side of your Next.js app. You can create this function in a file called `amplifyServerUtils.ts` under a `utils` folder in your codebase.

In this file, you import the Amplify backend outputs from the `amplify_outputs.json` file generated by the Amplify CLI, and use the `createServerRunner` function to create the `runWithAmplifyServerContextRunner` function. For example:

```typescript
import { createServerRunner } from '@aws-amplify/adapter-nextjs';
import outputs from '@/amplify_outputs.json';

export const { runWithAmplifyServerContext } = createServerRunner({
  config: outputs
});
```

You can then use the exported `runWithAmplifyServerContext` function to call Amplify APIs within isolated request contexts.

To configure Amplify library for client-side usage, you need to call the `Amplify.configure` function as you would to use Amplify in a single-page application. You also need to set `ssr` to `true` when calling `Amplify.configure` to instruct the Amplify library to store tokens in the cookie store of a browser.

```typescript
import outputs from '@/amplify_outputs.json';
import { Amplify } from 'aws-amplify';

Amplify.configure(outputs, {
  ssr: true
});
```

Authentication with Next.js server-side runtime can be done using the Amplify Auth category APIs to sign up and sign in end users on the client side. You can also use the `fetchAuthSession` API to check the auth sessions attached to incoming requests in the middleware of your Next.js app.

To call Amplify category APIs on the server side, you need to import the API from the `/server` sub path and use the `runWithAmplifyServerContext` helper function. For example, you can use the `getCurrentUser` API to get the current user:

```typescript
import { getCurrentUser } from 'aws-amplify/auth/server';
import { runWithAmplifyServerContext } from '@/utils/amplifyServerUtils';

const user = await runWithAmplifyServerContext({
  nextServerContext: { request, response },
  operation: (contextSpec) => getCurrentUser(contextSpec)
});
```

You can also use Amplify APIs in route handlers, `getServerSideProps`, and `getStaticProps`. For example:

```typescript
export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const user = await runWithAmplifyServerContext({
    nextServerContext: { request: req, response: res },
    operation: (contextSpec) => getCurrentUser(contextSpec)
  });

  return { props: { user } };
};
```

Note that not all Amplify APIs are supported for server-side usage. You can check the supported APIs in the documentation. If you have a server-side use case that isn't currently supported in Amplify JS, you can consider using the AWS SDK for JavaScript. 

For React server components, you can use dynamic rendering to render pages based on user sessions. You can also use static rendering to render pages that don't require user sessions. 

In summary, to use Amplify Auth and Data APIs from Next.js server-side runtimes, you need to install the Amplify Next.js adapter, configure Amplify APIs for server-side usage, and use the `runWithAmplifyServerContext` function to call Amplify APIs within isolated request contexts. You can also use Amplify APIs in route handlers, `getServerSideProps`, and `getStaticProps`.

This quickstart guide will walk you through building a task list application with TypeScript, Next.js App Router with Server Components, and React. If you're new to these technologies, it's recommended that you go through the official React, Next.js, and TypeScript tutorials first.

To get started, you'll need to create a new project and set up the necessary prerequisites. 

Next, you'll create a new Next.js project with the App Router and set up Amplify. 

You'll then build a backend for your application using Amplify.

## Building the UI

To connect to the backend data and auth resources, you'll need to add UI to your application. 

### Configure Amplify Client Side

First, install the Amplify UI component library by running `npm add @aws-amplify/ui-react` in your terminal.

Next, create a new file called `ConfigureAmplify.tsx` in the `components` folder and add the following code:
```typescript
// components/ConfigureAmplify.tsx
"use client";

import { Amplify } from "aws-amplify";
import outputs from "@/amplify_outputs.json";

Amplify.configure(outputs, { ssr: true });

export default function ConfigureAmplifyClientSide() {
  return null;
}
```

Then, update `app/layout.tsx` to import and render the `ConfigureAmplifyClientSide` component:
```typescript
// app/layout.tsx
import "@aws-amplify/ui-react/styles.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

import ConfigureAmplifyClientSide from "@/components/ConfigureAmplify";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConfigureAmplifyClientSide />
        {children}
      </body>
    </html>
  );
}
```

### Configure Amplify Server Side

First, install the Amplify Next.js adapter by running `npm add @aws-amplify/adapter-nextjs` in your terminal.

Next, create a new file called `amplify-utils.ts` in the `utils` folder and add the following code:
```typescript
// utils/amplify-utils.ts
import { cookies } from "next/headers";
import { createServerRunner } from "@aws-amplify/adapter-nextjs";
import { generateServerClientUsingCookies } from "@aws-amplify/adapter-nextjs/api";
import { getCurrentUser } from "aws-amplify/auth/server";
import { type Schema } from "@/amplify/data/resource";
import outputs from "@/amplify_outputs.json";

export const { runWithAmplifyServerContext } = createServerRunner({
  config: outputs,
});

export const cookiesClient = generateServerClientUsingCookies<Schema>({
  config: outputs,
  cookies,
});

export async function AuthGetCurrentUserServer() {
  try {
    const currentUser = await runWithAmplifyServerContext({
      nextServerContext: { cookies },
      operation: (contextSpec) => getCurrentUser(contextSpec),
    });
    return currentUser;
  } catch (error) {
    console.error(error);
  }
}
```

### Add Server Authentication Routes

First, create a new file called `Login.tsx` in the `components` folder and add the following code:
```typescript
// components/Login.tsx
"use client";

import { withAuthenticator } from "@aws-amplify/ui-react";
import { redirect } from "next/navigation";
import { useEffect } from "react";

function Login() {
  useEffect(() => {
    redirect("/");
  }, []);

  return null;
}

export default withAuthenticator(Login);
```

Next, create a new file called `page.tsx` in the `app/login` folder and add the following code:
```typescript
// app/login/page.tsx
import Login from "@/components/Login";

export default function LoginPage() {
  return <Login />;
}
```

You can also customize the `Authenticator` component by creating a custom header. Here's an example:
```typescript
// app/login/page.tsx
"use client";

import {
  Authenticator,
  Text,
  View,
  useAuthenticator,
} from "@aws-amplify/ui-react";
import { redirect } from "next/navigation";
import { useEffect } from "react";

const components = {
  Header() {
    return (
      <View textAlign="center">
        <Text><span style={{color: "white"}}>Authenticator Header</span></Text>
      </View>
    );
  },
};

function CustomAuthenticator() {
  const { user } = useAuthenticator((context) => [context.user]);

  useEffect(() => {
    if (user) {
      redirect("/");
    }
  }, [user]);

  return <Authenticator components={components} />;
}

export default function Login() {
  return (
    <Authenticator.Provider>
      <CustomAuthenticator />
    </Authenticator.Provider>
  );
}
```

### Add Logout Component

Create a new file called `Logout.tsx` in the `components` folder and add the following code:
```typescript
// components/Logout.tsx
"use client";

import { signOut } from "aws-amplify/auth";
import { useRouter } from "next/navigation";

export default function Logout() {
  const router = useRouter();

  return (
    <button
      onClick={async () => {
        await signOut();
        router.push("/login");
      }}
      className="px-2 bg-white text-black"
    >
      Sign out
    </button>
  );
}
```

### Add Middleware for Server-Side Redirect

Create a new file called `middleware.ts` in the root of the project and add the following code:
```typescript
// middleware.ts
import { NextRequest, NextResponse } from "next/server";
import { fetchAuthSession } from "aws-amplify/auth/server";
import { runWithAmplifyServerContext } from "@/utils/amplify-utils";

export async function middleware(request: NextRequest) {
  const response = NextResponse.next();

  const authenticated = await runWithAmplifyServerContext({
    nextServerContext: { request, response },
    operation: async (contextSpec) => {
      try {
        const session = await fetchAuthSession(contextSpec, {});
        return session.tokens!== undefined;
      } catch (error) {
        console.log(error);
        return false;
      }
    },
  });

  if (authenticated) {
    return response;
  }

  return NextResponse.redirect(new URL("/login", request.url));
}

export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|login).*)",
  ],
};
```

### View List of To-Do Items

To display the list of to-do items, update the `app/page.tsx` file with the following code:
```typescript
// app/page.tsx
import { cookiesClient } from "@/utils/amplify-utils";

async function App() {
  const { data: todos } = await cookiesClient.models.Todo.list();

  return (
    <>
      <h1>Hello, Amplify 👋</h1>
      <ul>
        {todos && todos.map((todo) => <li key={todo.id}>{todo.content}</li>)}
      </ul>
    </>
  );
}

export default App;
```

### Create a New To-Do Item

To create a new to-do item, update the `app/page.tsx` file with the following code:
```typescript
// app/page.tsx
import { revalidatePath } from "next/cache";
import { AuthGetCurrentUserServer, cookiesClient } from "@/utils/amplify-utils";
import Logout from "@/components/Logout";

async function App() {
  const user = await AuthGetCurrentUserServer();
  const { data: todos } = await cookiesClient.models.Todo.list();

  async function addTodo(data: FormData) {
    "use server";
    const title = data.get("title") as string;
    await cookiesClient.models.Todo.create({
      content: title,
      done: false,
      priority: "medium",
    });
    revalidatePath("/");
  }

  return (
    <>
      <h1>Hello, Amplify 👋</h1>
      {user && <Logout />}
      <form action={addTodo}>
        <input type="text" name="title" />
        <button type="submit">Add Todo</button>
      </form>

      <ul>
        {todos && todos.map((todo) => <li key={todo.id}>{todo.content}</li>)}
      </ul>
    </>
  );
}

export default App;
```

Run your application with `npm run dev` and navigate to `http://localhost:3000`. You should now see the authenticator, which is already configured and ready for your first sign-up. Create a new user account, confirm the account through email, and then sign in. Once you've signed in, you can view the list of to-do items and create new ones.

To use Amplify categories APIs from a React application, you need to set up the Amplify APIs plugin. Here's a step-by-step guide to get started:

First, ensure you have installed the relevant Amplify libraries. You can do this by following the manual installation guide.

Next, set up the Amplify APIs plugin. Since React doesn't have a built-in concept of plugins like Nuxt, you'll need to create a custom hook to make the Amplify APIs accessible throughout your application.

Here's an example implementation of the `useAmplify` hook:

```javascript
import { Amplify } from 'aws-amplify';
import {
  fetchAuthSession,
  fetchUserAttributes,
  signIn,
  signOut
} from 'aws-amplify/auth';
import { list } from 'aws-amplify/storage';
import { generateClient } from 'aws-amplify/api';

const config = {
  // your Amplify configuration
};

Amplify.configure(config);

const amplify = {
  Auth: {
    fetchAuthSession,
    fetchUserAttributes,
    signIn,
    signOut
  },
  Storage: {
    list
  },
  GraphQL: {
    client: generateClient()
  }
};

export const useAmplify = () => {
  return amplify;
};
```

You can then use the `useAmplify` hook in your React components to access the Amplify APIs. For example:

```javascript
import React from 'react';
import { useAmplify } from './useAmplify';

const MyComponent = () => {
  const { Auth, Storage, GraphQL } = useAmplify();

  const handleSignIn = async () => {
    try {
      const session = await Auth.signIn();
      console.log(session);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <button onClick={handleSignIn}>Sign In</button>
    </div>
  );
};
```

To protect your routes with authentication, you can create a custom higher-order component (HOC) that checks if the user is authenticated before rendering the protected route.

Here's an example implementation of the `withAuth` HOC:

```javascript
import React from 'react';
import { useAmplify } from './useAmplify';

const withAuth = (WrappedComponent) => {
  const AuthenticatedComponent = () => {
    const { Auth } = useAmplify();

    const [authenticated, setAuthenticated] = React.useState(false);

    React.useEffect(() => {
      const checkAuth = async () => {
        try {
          const session = await Auth.fetchAuthSession();
          setAuthenticated(true);
        } catch (error) {
          setAuthenticated(false);
        }
      };
      checkAuth();
    }, [Auth]);

    if (!authenticated) {
      return <div>You are not authenticated</div>;
    }

    return <WrappedComponent />;
  };

  return AuthenticatedComponent;
};

export default withAuth;
```

You can then use the `withAuth` HOC to protect your routes:

```javascript
import React from 'react';
import withAuth from './withAuth';

const ProtectedRoute = () => {
  return <div>This is a protected route</div>;
};

const AuthenticatedRoute = withAuth(ProtectedRoute);

const App = () => {
  return (
    <div>
      <AuthenticatedRoute />
    </div>
  );
};
```

To set up server-side rendering (SSR) with Amplify, you'll need to create a custom server-side rendering function that uses the `runWithAmplifyServerContext` function from `aws-amplify/adapter-core`.

Here's an example implementation of the `ssr` function:

```javascript
import { runWithAmplifyServerContext } from 'aws-amplify/adapter-core';
import { parseAmplifyConfig } from 'aws-amplify/utils';

const config = {
  // your Amplify configuration
};

const amplifyConfig = parseAmplifyConfig(config);

const ssr = async (event) => {
  const libraryOptions = {
    Auth: {
      // your Auth configuration
    }
  };

  const result = await runWithAmplifyServerContext(
    amplifyConfig,
    libraryOptions,
    async (contextSpec) => {
      // your server-side rendering logic
    }
  );

  return result;
};

export default ssr;
```

You can then use the `ssr` function to render your React components on the server:

```javascript
import React from 'react';
import ReactDOMServer from 'react-dom/server';
import ssr from './ssr';

const App = () => {
  return <div>Hello World!</div>;
};

const html = ReactDOMServer.renderToString(<App />);

const result = await ssr({
  // your event object
});

console.log(result);
```

Note that this is just a basic example, and you'll need to modify it to fit your specific use case. Additionally, you may need to handle errors and edge cases that are not covered in this example.