To use Amplify categories APIs from a React application, you need to set up the Amplify APIs plugin. Here's a step-by-step guide to get started:

First, ensure you have installed the relevant Amplify libraries. You can do this by following the manual installation guide.

Next, set up the Amplify APIs plugin. Since React doesn't have a built-in concept of plugins like Nuxt, you'll need to create a custom hook to make the Amplify APIs accessible throughout your application.

Here's an example implementation of the `useAmplify` hook:

```javascript
import { Amplify } from 'aws-amplify';
import {
  fetchAuthSession,
  fetchUserAttributes,
  signIn,
  signOut
} from 'aws-amplify/auth';
import { list } from 'aws-amplify/storage';
import { generateClient } from 'aws-amplify/api';

const config = {
  // your Amplify configuration
};

Amplify.configure(config);

const amplify = {
  Auth: {
    fetchAuthSession,
    fetchUserAttributes,
    signIn,
    signOut
  },
  Storage: {
    list
  },
  GraphQL: {
    client: generateClient()
  }
};

export const useAmplify = () => {
  return amplify;
};
```

You can then use the `useAmplify` hook in your React components to access the Amplify APIs. For example:

```javascript
import React from 'react';
import { useAmplify } from './useAmplify';

const MyComponent = () => {
  const { Auth, Storage, GraphQL } = useAmplify();

  const handleSignIn = async () => {
    try {
      const session = await Auth.signIn();
      console.log(session);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <button onClick={handleSignIn}>Sign In</button>
    </div>
  );
};
```

To protect your routes with authentication, you can create a custom higher-order component (HOC) that checks if the user is authenticated before rendering the protected route.

Here's an example implementation of the `withAuth` HOC:

```javascript
import React from 'react';
import { useAmplify } from './useAmplify';

const withAuth = (WrappedComponent) => {
  const AuthenticatedComponent = () => {
    const { Auth } = useAmplify();

    const [authenticated, setAuthenticated] = React.useState(false);

    React.useEffect(() => {
      const checkAuth = async () => {
        try {
          const session = await Auth.fetchAuthSession();
          setAuthenticated(true);
        } catch (error) {
          setAuthenticated(false);
        }
      };
      checkAuth();
    }, [Auth]);

    if (!authenticated) {
      return <div>You are not authenticated</div>;
    }

    return <WrappedComponent />;
  };

  return AuthenticatedComponent;
};

export default withAuth;
```

You can then use the `withAuth` HOC to protect your routes:

```javascript
import React from 'react';
import withAuth from './withAuth';

const ProtectedRoute = () => {
  return <div>This is a protected route</div>;
};

const AuthenticatedRoute = withAuth(ProtectedRoute);

const App = () => {
  return (
    <div>
      <AuthenticatedRoute />
    </div>
  );
};
```

To set up server-side rendering (SSR) with Amplify, you'll need to create a custom server-side rendering function that uses the `runWithAmplifyServerContext` function from `aws-amplify/adapter-core`.

Here's an example implementation of the `ssr` function:

```javascript
import { runWithAmplifyServerContext } from 'aws-amplify/adapter-core';
import { parseAmplifyConfig } from 'aws-amplify/utils';

const config = {
  // your Amplify configuration
};

const amplifyConfig = parseAmplifyConfig(config);

const ssr = async (event) => {
  const libraryOptions = {
    Auth: {
      // your Auth configuration
    }
  };

  const result = await runWithAmplifyServerContext(
    amplifyConfig,
    libraryOptions,
    async (contextSpec) => {
      // your server-side rendering logic
    }
  );

  return result;
};

export default ssr;
```

You can then use the `ssr` function to render your React components on the server:

```javascript
import React from 'react';
import ReactDOMServer from 'react-dom/server';
import ssr from './ssr';

const App = () => {
  return <div>Hello World!</div>;
};

const html = ReactDOMServer.renderToString(<App />);

const result = await ssr({
  // your event object
});

console.log(result);
```

Note that this is just a basic example, and you'll need to modify it to fit your specific use case. Additionally, you may need to handle errors and edge cases that are not covered in this example.