To use Amplify Auth and Data APIs from Next.js server-side runtimes, you need to install the Amplify Next.js adapter in addition to the Amplify libraries. You can do this by running the command `npm add aws-amplify @aws-amplify/adapter-nextjs` in your terminal.

Next, you need to configure Amplify APIs for server-side usage by creating a `runWithAmplifyServerContextRunner` function. This function is used to call Amplify APIs on the server-side of your Next.js app. You can create this function in a file called `amplifyServerUtils.ts` under a `utils` folder in your codebase.

In this file, you import the Amplify backend outputs from the `amplify_outputs.json` file generated by the Amplify CLI, and use the `createServerRunner` function to create the `runWithAmplifyServerContextRunner` function. For example:

```typescript
import { createServerRunner } from '@aws-amplify/adapter-nextjs';
import outputs from '@/amplify_outputs.json';

export const { runWithAmplifyServerContext } = createServerRunner({
  config: outputs
});
```

You can then use the exported `runWithAmplifyServerContext` function to call Amplify APIs within isolated request contexts.

To configure Amplify library for client-side usage, you need to call the `Amplify.configure` function as you would to use Amplify in a single-page application. You also need to set `ssr` to `true` when calling `Amplify.configure` to instruct the Amplify library to store tokens in the cookie store of a browser.

```typescript
import outputs from '@/amplify_outputs.json';
import { Amplify } from 'aws-amplify';

Amplify.configure(outputs, {
  ssr: true
});
```

Authentication with Next.js server-side runtime can be done using the Amplify Auth category APIs to sign up and sign in end users on the client side. You can also use the `fetchAuthSession` API to check the auth sessions attached to incoming requests in the middleware of your Next.js app.

To call Amplify category APIs on the server side, you need to import the API from the `/server` sub path and use the `runWithAmplifyServerContext` helper function. For example, you can use the `getCurrentUser` API to get the current user:

```typescript
import { getCurrentUser } from 'aws-amplify/auth/server';
import { runWithAmplifyServerContext } from '@/utils/amplifyServerUtils';

const user = await runWithAmplifyServerContext({
  nextServerContext: { request, response },
  operation: (contextSpec) => getCurrentUser(contextSpec)
});
```

You can also use Amplify APIs in route handlers, `getServerSideProps`, and `getStaticProps`. For example:

```typescript
export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const user = await runWithAmplifyServerContext({
    nextServerContext: { request: req, response: res },
    operation: (contextSpec) => getCurrentUser(contextSpec)
  });

  return { props: { user } };
};
```

Note that not all Amplify APIs are supported for server-side usage. You can check the supported APIs in the documentation. If you have a server-side use case that isn't currently supported in Amplify JS, you can consider using the AWS SDK for JavaScript. 

For React server components, you can use dynamic rendering to render pages based on user sessions. You can also use static rendering to render pages that don't require user sessions. 

In summary, to use Amplify Auth and Data APIs from Next.js server-side runtimes, you need to install the Amplify Next.js adapter, configure Amplify APIs for server-side usage, and use the `runWithAmplifyServerContext` function to call Amplify APIs within isolated request contexts. You can also use Amplify APIs in route handlers, `getServerSideProps`, and `getStaticProps`.