This quickstart guide will walk you through building a task list application with TypeScript, Next.js App Router with Server Components, and React. If you're new to these technologies, it's recommended that you go through the official React, Next.js, and TypeScript tutorials first.

To get started, you'll need to create a new project and set up the necessary prerequisites. 

Next, you'll create a new Next.js project with the App Router and set up Amplify. 

You'll then build a backend for your application using Amplify.

## Building the UI

To connect to the backend data and auth resources, you'll need to add UI to your application. 

### Configure Amplify Client Side

First, install the Amplify UI component library by running `npm add @aws-amplify/ui-react` in your terminal.

Next, create a new file called `ConfigureAmplify.tsx` in the `components` folder and add the following code:
```typescript
// components/ConfigureAmplify.tsx
"use client";

import { Amplify } from "aws-amplify";
import outputs from "@/amplify_outputs.json";

Amplify.configure(outputs, { ssr: true });

export default function ConfigureAmplifyClientSide() {
  return null;
}
```

Then, update `app/layout.tsx` to import and render the `ConfigureAmplifyClientSide` component:
```typescript
// app/layout.tsx
import "@aws-amplify/ui-react/styles.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

import ConfigureAmplifyClientSide from "@/components/ConfigureAmplify";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConfigureAmplifyClientSide />
        {children}
      </body>
    </html>
  );
}
```

### Configure Amplify Server Side

First, install the Amplify Next.js adapter by running `npm add @aws-amplify/adapter-nextjs` in your terminal.

Next, create a new file called `amplify-utils.ts` in the `utils` folder and add the following code:
```typescript
// utils/amplify-utils.ts
import { cookies } from "next/headers";
import { createServerRunner } from "@aws-amplify/adapter-nextjs";
import { generateServerClientUsingCookies } from "@aws-amplify/adapter-nextjs/api";
import { getCurrentUser } from "aws-amplify/auth/server";
import { type Schema } from "@/amplify/data/resource";
import outputs from "@/amplify_outputs.json";

export const { runWithAmplifyServerContext } = createServerRunner({
  config: outputs,
});

export const cookiesClient = generateServerClientUsingCookies<Schema>({
  config: outputs,
  cookies,
});

export async function AuthGetCurrentUserServer() {
  try {
    const currentUser = await runWithAmplifyServerContext({
      nextServerContext: { cookies },
      operation: (contextSpec) => getCurrentUser(contextSpec),
    });
    return currentUser;
  } catch (error) {
    console.error(error);
  }
}
```

### Add Server Authentication Routes

First, create a new file called `Login.tsx` in the `components` folder and add the following code:
```typescript
// components/Login.tsx
"use client";

import { withAuthenticator } from "@aws-amplify/ui-react";
import { redirect } from "next/navigation";
import { useEffect } from "react";

function Login() {
  useEffect(() => {
    redirect("/");
  }, []);

  return null;
}

export default withAuthenticator(Login);
```

Next, create a new file called `page.tsx` in the `app/login` folder and add the following code:
```typescript
// app/login/page.tsx
import Login from "@/components/Login";

export default function LoginPage() {
  return <Login />;
}
```

You can also customize the `Authenticator` component by creating a custom header. Here's an example:
```typescript
// app/login/page.tsx
"use client";

import {
  Authenticator,
  Text,
  View,
  useAuthenticator,
} from "@aws-amplify/ui-react";
import { redirect } from "next/navigation";
import { useEffect } from "react";

const components = {
  Header() {
    return (
      <View textAlign="center">
        <Text><span style={{color: "white"}}>Authenticator Header</span></Text>
      </View>
    );
  },
};

function CustomAuthenticator() {
  const { user } = useAuthenticator((context) => [context.user]);

  useEffect(() => {
    if (user) {
      redirect("/");
    }
  }, [user]);

  return <Authenticator components={components} />;
}

export default function Login() {
  return (
    <Authenticator.Provider>
      <CustomAuthenticator />
    </Authenticator.Provider>
  );
}
```

### Add Logout Component

Create a new file called `Logout.tsx` in the `components` folder and add the following code:
```typescript
// components/Logout.tsx
"use client";

import { signOut } from "aws-amplify/auth";
import { useRouter } from "next/navigation";

export default function Logout() {
  const router = useRouter();

  return (
    <button
      onClick={async () => {
        await signOut();
        router.push("/login");
      }}
      className="px-2 bg-white text-black"
    >
      Sign out
    </button>
  );
}
```

### Add Middleware for Server-Side Redirect

Create a new file called `middleware.ts` in the root of the project and add the following code:
```typescript
// middleware.ts
import { NextRequest, NextResponse } from "next/server";
import { fetchAuthSession } from "aws-amplify/auth/server";
import { runWithAmplifyServerContext } from "@/utils/amplify-utils";

export async function middleware(request: NextRequest) {
  const response = NextResponse.next();

  const authenticated = await runWithAmplifyServerContext({
    nextServerContext: { request, response },
    operation: async (contextSpec) => {
      try {
        const session = await fetchAuthSession(contextSpec, {});
        return session.tokens!== undefined;
      } catch (error) {
        console.log(error);
        return false;
      }
    },
  });

  if (authenticated) {
    return response;
  }

  return NextResponse.redirect(new URL("/login", request.url));
}

export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|login).*)",
  ],
};
```

### View List of To-Do Items

To display the list of to-do items, update the `app/page.tsx` file with the following code:
```typescript
// app/page.tsx
import { cookiesClient } from "@/utils/amplify-utils";

async function App() {
  const { data: todos } = await cookiesClient.models.Todo.list();

  return (
    <>
      <h1>Hello, Amplify ðŸ‘‹</h1>
      <ul>
        {todos && todos.map((todo) => <li key={todo.id}>{todo.content}</li>)}
      </ul>
    </>
  );
}

export default App;
```

### Create a New To-Do Item

To create a new to-do item, update the `app/page.tsx` file with the following code:
```typescript
// app/page.tsx
import { revalidatePath } from "next/cache";
import { AuthGetCurrentUserServer, cookiesClient } from "@/utils/amplify-utils";
import Logout from "@/components/Logout";

async function App() {
  const user = await AuthGetCurrentUserServer();
  const { data: todos } = await cookiesClient.models.Todo.list();

  async function addTodo(data: FormData) {
    "use server";
    const title = data.get("title") as string;
    await cookiesClient.models.Todo.create({
      content: title,
      done: false,
      priority: "medium",
    });
    revalidatePath("/");
  }

  return (
    <>
      <h1>Hello, Amplify ðŸ‘‹</h1>
      {user && <Logout />}
      <form action={addTodo}>
        <input type="text" name="title" />
        <button type="submit">Add Todo</button>
      </form>

      <ul>
        {todos && todos.map((todo) => <li key={todo.id}>{todo.content}</li>)}
      </ul>
    </>
  );
}

export default App;
```

Run your application with `npm run dev` and navigate to `http://localhost:3000`. You should now see the authenticator, which is already configured and ready for your first sign-up. Create a new user account, confirm the account through email, and then sign in. Once you've signed in, you can view the list of to-do items and create new ones.