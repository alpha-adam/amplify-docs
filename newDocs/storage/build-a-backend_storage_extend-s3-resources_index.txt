For Amplify-generated S3 resources, you can access the underlying Amazon S3 resources to customize your backend configuration using the AWS Cloud Developer Kit (AWS CDK). To enable Transfer Acceleration on the bucket, you need to unwrap the L1 CDK construct from the L2 CDK construct. Here is an example of how to do this in React:

```tsx
import * as s3 from 'aws-cdk-lib/aws-s3';
import { defineBackend } from '@aws-amplify/backend';
import { storage } from './storage/resource';

const backend = defineBackend({
  storage
});

const s3Bucket = backend.storage.resources.bucket;
const cfnBucket = s3Bucket.node.defaultChild as s3.CfnBucket;

cfnBucket.accelerateConfiguration = {
  accelerationStatus: "Enabled"
}
```

To upload files using the accelerated S3 endpoint, you can set the `useAccelerateEndpoint` parameter to `true` in the `AWSS3StorageUploadFileOptions`. However, since you are using React, you would use the `Amplify.Storage` API to upload files. Here is an example of how to upload a file using the accelerated S3 endpoint in React:

```tsx
import Amplify from 'aws-amplify';
import { Storage } from '@aws-amplify/storage';

// Initialize Amplify
Amplify.configure({
  // Your Amplify configuration
});

// Upload a file using the accelerated S3 endpoint
const file = new File(['file content'], 'example.txt', {
  type: 'text/plain',
});
const key = 'public/example';
const options = {
  useAccelerateEndpoint: true,
};

Storage.put(key, file, options)
 .then((result) => console.log(result))
 .catch((error) => console.error(error));
```

For manually configured S3 resources, you need to set up a CORS Policy for your S3 bucket to make calls to your S3 bucket from your app. You can do this by following these steps:

1. Go to the Amazon S3 console and click on your project's `userfiles` bucket.
2. Click on the **Permissions** tab for your bucket.
3. Click the edit button in the **Cross-origin resource sharing (CORS)** section.
4. Make the changes and click on Save Changes. You can add required metadata to be exposed in `ExposeHeaders` with `x-amz-meta-XXXX` format.

Here is an example of a CORS configuration:

```json
[
  {
    "AllowedHeaders": ["*"],
    "AllowedMethods": ["GET", "HEAD", "PUT", "POST", "DELETE"],
    "AllowedOrigins": ["*"],
    "ExposeHeaders": [
      "x-amz-server-side-encryption",
      "x-amz-request-id",
      "x-amz-id-2",
      "ETag",
      "x-amz-meta-foo"
    ],
    "MaxAgeSeconds": 3000
  }
]
```

Note that you can restrict access to your bucket by updating `AllowedOrigin` to include individual domains.