Data modeling capabilities allow you to define and customize your data model as part of a data schema. You can enhance your data model with various fields, customize their identifiers, apply authorization rules, or model relationships. Every data model automatically provides create, read, update, and delete API operations as well as real-time subscription events.

In React, you can define a data model using the Amplify schema builder. For example:
```javascript
import { a, defineData } from '@aws-amplify/backend';

const schema = a
 .schema({
    Customer: a
     .model({
        customerId: a.id().required(),
        name: a.string(),
        location: a.customType({
          lat: a.float().required(),
          long: a.float().required(),
        }),
        engagementStage: a.enum(["PROSPECT", "INTERESTED", "PURCHASED"]),
        collectionId: a.id(),
        collection: a.belongsTo("Collection", "collectionId")
      })
     .identifier(["customerId"]),
    Collection: a
     .model({
        customers: a.hasMany("Customer", "collectionId"), 
        tags: a.string().array(), 
        representativeId: a.id().required(),
      })
     .secondaryIndexes((index) => [index("representativeId")]),
  })
 .authorization((allow) => [allow.publicApiKey()]);

const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: "apiKey",
    apiKeyAuthorizationMode: {
      expiresInDays: 30,
    },
  },
});
```
This example defines a data model with two types: `Customer` and `Collection`. The `Customer` type has fields for `customerId`, `name`, `location`, `engagementStage`, `collectionId`, and `collection`. The `Collection` type has fields for `customers`, `tags`, and `representativeId`. The `identifier` method is used to customize the identifier for the `Customer` type, and the `secondaryIndexes` method is used to customize the secondary indexes for the `Collection` type.

If you are coming from Gen 1, you can continue to use the GraphQL Schema Definition Language (SDL) for defining your schema. However, it is strongly recommended to use the TypeScript-first schema builder experience in your project as it provides type safety and is the recommended way of working with Amplify going forward.

For example, you can define a schema using GraphQL SDL like this:
```javascript
import { defineData } from '@aws-amplify/backend';

const schema = /* GraphQL */`
  type Todo @model @auth(rules: [{ allow: owner }]) {
    content: String
    isDone: Boolean
  }
`;

const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: "apiKey",
    apiKeyAuthorizationMode: {
      expiresInDays: 30,
    },
  },
});
```
Note that some features available in Gen 1 GraphQL SDL are not available in Gen 2. You can see the feature matrix for features supported in Gen 2.