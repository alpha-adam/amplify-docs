To connect your React app to an existing MySQL or PostgreSQL database using AWS Amplify Gen 2, follow these steps:

First, you need to create a connection string using your database information, including hostname, port, username, user password, and database name.

To get started, set secrets for your database connection using the Amplify sandbox's secret functionality or the Amplify console. You can use the following command to set secrets:
```
npx ampx sandbox secret set SQL_CONNECTION_STRING
```
The connection string format for MySQL is:
```
mysql://user:password@hostname:port/db-name
```
And for PostgreSQL:
```
postgres://user:password@hostname:port/db-name
```
Next, generate a TypeScript representation of your database schema using the following command:
```
npx ampx generate schema-from-database --connection-uri-secret SQL_CONNECTION_STRING --out amplify/data/schema.sql.ts
```
This will create a new schema.sql.ts file with a schema reflecting the types of your database. Do not edit this file directly. Instead, import the schema to your amplify/data/resource.ts file and apply any additive changes there.

To fine-grain authorization rules, use the `.setAuthorization()` modifier to set model-level and field-level authorization rules for your SQL-backed data models.

You can also deploy your Data resources using the cloud sandbox and make create, read, update, delete, and subscribe requests to your SQL-backed data models.

Additionally, you can rename generated models and fields, add relationships between tables, and add custom queries, mutations, and subscriptions to your auto-generated SQL data schema.

To configure the database connection for production, add the database connection string as a secret and make sure to add the appropriate database connection string with the same secret name used in the sandbox environment.

To troubleshoot issues, you can enable debug mode by setting the `DEBUG_MODE` environment variable to `true` on the Amplify-generated SQL Lambda function.

Note that if your table doesn't have a designated primary key, it may not get generated when running `npx ampx generate schema-from-database`. A primary key is required for `npx ampx generate schema-from-database` to infer the table structure and create a create, read, update, and delete API.

Here is an example of how to use the generated schema in your React app:
```typescript
import { schema as generatedSqlSchema } from './schema.sql';

const sqlSchema = generatedSqlSchema.authorization(allow => allow.guest());

const combinedSchema = a.combine([schema, sqlSchema]);

export type Schema = ClientSchema<typeof combinedSchema>;

export const data = defineData({
  schema: combinedSchema
});
```
You can then use the `data` object to make requests to your SQL-backed data models. For example:
```typescript
const { data: events } = await client.models.event.list();
```