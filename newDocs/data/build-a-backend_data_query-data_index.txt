You can read application data using the Amplify Data client. This guide reviews the difference between reading data and getting data, how to filter query results to get just the data you need, and how to paginate results to make your data more manageable. You will also learn how to cancel these requests when needed.

Before you begin, you need an application connected to the API and data already created to view.

Queries are used to read data through the API and include the `list` and `get` operations. Amplify Data automatically creates `list` and `get` queries for any model in your schema. The `list` query retrieves multiple items, such as Todo items, without needing to specify an identifier for a particular record. This is best suited for getting an overview or summary of items, or for enhancing the `list` operation to filter the items by specific criteria. When you want to query a single entry by an identifier, you would use `get` to retrieve a specific Todo item.

You can list items by first generating the Data client with your backend Data schema. Then you can list items of your desired model. For example, to list all Todo items, you can use the following code:
```javascript
const client = generateClient<Schema>();
const { data: todos, errors } = await client.models.Todo.list();
```
To get a specific Todo item, you can use the following code:
```javascript
const { data: todo, errors } = await client.models.Todo.get({
  id: '...',
});
```
Each API request uses an authorization mode. If you get unauthorized errors, you may need to update your authorization mode. To override the default authorization mode defined in your amplify/data/resource file, pass an `authMode` property to the request or the client.

You can filter list queries by using the `filter` parameter. For example, to filter Todo items by content, you can use the following code:
```javascript
const { data: todos, errors } = await client.models.Todo.list({
  filter: {
    content: {
      beginsWith: 'hello'
    }
  }
});
```
You can also combine filters with `and`, `or`, and `not` Boolean logic.

To paginate list queries, you can use the `nextToken` and `limit` input variables. The `limit` variable limits how many results are returned. The response will include a `nextToken` you can use to request the next page of data.

In React, you can use the `usePagination` hook in Amplify UI to help with managing the pagination user experience. For example:
```javascript
import * as React from 'react';
import { Pagination } from '@aws-amplify/ui-react';

export const PaginationHasMorePagesExample = () => {
  const [pageTokens, setPageTokens] = React.useState([null]);
  const [currentPageIndex, setCurrentPageIndex] = React.useState(1);
  const [hasMorePages, setHasMorePages] = React.useState(true);

  const handleNextPage = async () => {
    if (hasMorePages && currentPageIndex === pageTokens.length) {
      const { data: todos, nextToken } = await client.models.Todo.list({
        nextToken: pageTokens[pageTokens.length - 1]
      });

      if (!nextToken) {
        setHasMorePages(false);
      }

      setPageTokens([...pageTokens, nextToken]);
    }

    setCurrentPageIndex(currentPageIndex + 1);
  };

  return (
    <Pagination
      currentPage={currentPageIndex}
      totalPages={pageTokens.length}
      hasMorePages={hasMorePages}
      onNext={handleNextPage}
      onPrevious={() => setCurrentPageIndex(currentPageIndex - 1)}
      onChange={(pageIndex) => setCurrentPageIndex(pageIndex)}
    />
  );
};
```
You can also fetch only the data you need with a custom selection set. A custom selection set allows consumers to specify, on a per-call basis, the fields the consumer wants to retrieve.

To cancel read requests, you can call `.cancel` on the query request promise that's returned by `.list(...)` or `.get(...)`.

Finally, you can use TypeScript type helpers for Amplify Data to specify data model types for type generics. For example:
```typescript
import { type Schema } from '@/amplify/data/resource';

type Post = Schema['Post']['type'];

const [posts, setPosts] = useState<Post[]>([]);
```
You can also combine the `Schema["MODEL_NAME"]["type"]` type with the `SelectionSet` helper type to describe the return type of API requests using the `selectionSet` parameter.