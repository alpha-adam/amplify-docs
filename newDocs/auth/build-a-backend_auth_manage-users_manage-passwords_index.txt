Amplify Auth provides a secure way for your users to change their password or recover a forgotten password. 

By default, your users can retrieve access to their accounts if they forgot their password by using either their phone or email. The default account recovery methods are as follows: 
- If `phone` is used as a login option, the user account verification channel is their phone number.
- If `email` is used as a login option, the user account verification channel is their email.
- If both `email` and `phone` are used as login options, the user account verification channel is their email.

To reset a user's password, you can use the `resetPassword` API. This API sends a reset code to the user based on their settings. 

Here is a React code example of how to reset a user's password:
```javascript
import { resetPassword } from 'aws-amplify/auth';

const resetUserPassword = async () => {
  try {
    const output = await resetPassword({
      username: "hello@mycompany.com"
    });

    const { nextStep } = output;
    switch (nextStep.resetPasswordStep) {
      case 'CONFIRM_RESET_PASSWORD_WITH_CODE':
        const codeDeliveryDetails = nextStep.codeDeliveryDetails;
        console.log(`Confirmation code was sent to ${codeDeliveryDetails.deliveryMedium}`);
        // Collect the confirmation code from the user and pass to confirmResetPassword.
        break;
      case 'DONE':
        console.log('Successfully reset password.');
        break;
    }
  } catch (error) {
    console.log('Error resetting password:', error);
  }
};
```

After sending the reset code, you need to confirm the password reset using the `confirmResetPassword` API. This API takes the username, new password, and the confirmation code as parameters.

Here is a React code example of how to confirm the password reset:
```javascript
import { confirmResetPassword } from 'aws-amplify/auth';

const confirmPasswordReset = async () => {
  try {
    await confirmResetPassword({
      username: "hello@mycompany.com",
      confirmationCode: "123456",
      newPassword: "hunter3",
    });
    console.log('Password reset confirmed');
  } catch (error) {
    console.log('Error confirming password reset:', error);
  }
};
```

You can also update a signed-in user's password using the `updatePassword` API. This API takes the old password and the new password as parameters.

Here is a React code example of how to update a user's password:
```javascript
import { updatePassword } from 'aws-amplify/auth';

const updateCurrentUserPassword = async () => {
  try {
    await updatePassword({
      oldPassword: "hunter2",
      newPassword: "hunter3",
    });
    console.log('Password updated successfully');
  } catch (error) {
    console.log('Error updating password:', error);
  }
};
```

You can override the default user account verification channel by modifying the `accountRecovery` setting in the `auth` resource.

Here is a code example of how to override the default user account verification channel:
```javascript
import { defineAuth } from '@aws-amplify/backend';

export const auth = defineAuth({
  loginWith: {
    email: true
  },
  accountRecovery: 'EMAIL_ONLY'
});
```

You can also customize the password policy by modifying the `passwordPolicy` setting in the `cfnUserPool` resource.

Here is a code example of how to override the default password policy:
```javascript
import { defineBackend } from '@aws-amplify/backend';
import { auth } from './auth/resource';

const backend = defineBackend({
  auth,
});

const { cfnUserPool } = backend.auth.resources.cfnResources;

cfnUserPool.policies = {
  passwordPolicy: {
    minimumLength: 32,
    requireLowercase: true,
    requireNumbers: true,
    requireSymbols: true,
    requireUppercase: true,
    temporaryPasswordValidityDays: 20,
  },
};
```