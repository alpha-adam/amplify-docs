Amplify Auth interacts with its underlying Amazon Cognito user pool as an OpenID Connect (OIDC) provider. When users successfully authenticate, you receive OIDC-compliant JSON web tokens (JWT). These tokens are used to identify your user and access resources.

There are two types of tokens: access tokens and ID tokens. Access tokens are used to verify the bearer of the token is authorized to perform an action against a resource. ID tokens are intended to be used within your frontend application only and contain personally identifiable information (PII). They should not be used to authorize access against a resource.

Access tokens have a payload that includes information such as the user's sub (subject), issuer, client ID, and expiration time. For example:
```json
{
  "sub": "54288468-e051-706d-a73f-03892273d7e9",
  "iss": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_yoKn9s4Tq",
  "client_id": "1sg675g08g6g0e9f64grv9n5sk",
  "origin_jti": "0eadb994-a6e0-419e-b309-a7a0d522d72f",
  "event_id": "b180897a-181c-4f73-94bb-a2946e8b4ef1",
  "token_use": "access",
  "scope": "aws.cognito.signin.user.admin",
  "auth_time": 1714241873,
  "exp": 1714245473,
  "iat": 1714241873,
  "jti": "57f10a4d-a1f2-453b-8672-d1cfa8187047",
  "username": "54288468-e051-706d-a73f-03892273d7e9"
}
```

ID tokens also have a payload that includes information such as the user's sub, email, and email verified status. For example:
```json
{
  "sub": "54288468-e051-706d-a73f-03892273d7e9",
  "email_verified": true,
  "iss": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_yoKn9s4Tq",
  "cognito:username": "54288468-e051-706d-a73f-03892273d7e9",
  "origin_jti": "0eadb994-a6e0-419e-b309-a7a0d522d72f",
  "aud": "1sg675g08g6g0e9f64grv9n5sk",
  "event_id": "b180897a-181c-4f73-94bb-a2946e8b4ef1",
  "token_use": "id",
  "auth_time": 1714241873,
  "exp": 1714245473,
  "iat": 1714241873,
  "jti": "bb69af10-3ce0-47c2-8d8d-5bdc8630ab58",
  "email": "hello@mycompany.com"
}
```

You can customize the token management options in Amplify Auth. Token keys are automatically rotated for added security, but you can update how they are stored, customize the refresh rate and expiration times, and revoke tokens on sign-out.

To update the token-saving mechanism, you can choose from several storage options, including local storage, cookie storage, and session storage. You can also implement your own custom storage mechanism.

For example, to use local storage in a React application, you can use the following code:
```javascript
import { cognitoUserPoolsTokenProvider } from 'aws-amplify/auth/cognito';
import { defaultStorage } from 'aws-amplify/utils';

cognitoUserPoolsTokenProvider.setKeyValueStorage(defaultStorage);
```

To use cookie storage, you can use the following code:
```javascript
import { cognitoUserPoolsTokenProvider } from 'aws-amplify/auth/cognito';
import { CookieStorage } from 'aws-amplify/utils';

cognitoUserPoolsTokenProvider.setKeyValueStorage(new CookieStorage());
```

You can also implement your own custom storage mechanism by creating a class that implements the storage interface. For example:
```javascript
import { cognitoUserPoolsTokenProvider } from 'aws-amplify/auth/cognito';
import { KeyValueStorageInterface } from 'aws-amplify/utils';

class MyCustomStorage implements KeyValueStorageInterface {
  storageObject: Record<string, string> = {};
  async setItem(key: string, value: string): Promise<void> {
    this.storageObject[key] = value;
  }
  async getItem(key: string): Promise<string | null> {
    return this.storageObject[key];
  }
  async removeItem(key: string): Promise<void> {
    delete this.storageObject[key];
  }
  async clear(): Promise<void> {
    this.storageObject = {};
  }
}

cognitoUserPoolsTokenProvider.setKeyValueStorage(new MyCustomStorage());
```

Token revocation is enabled automatically in Amplify Auth. To revoke tokens, you can set up global sign-out with `signOut({ global: true })` to globally sign out your user from all of their devices.

For example, in a React application, you can use the following code:
```javascript
import { signOut } from 'aws-amplify/auth';

signOut({ global: true });
```

You can learn more about customizing the ID token, bringing your own tokens from external providers, and using cookie storage server-side in the Amplify documentation.