AWS Amplify provides various authentication flows for signing in users, including `userSRP`, `userPassword`, `customWithSRP`, `customWithoutSRP`, and `userAuth`. 

The `userSRP` flow uses the Secure Remote Password protocol, where the password never leaves the client and is unknown to the server. This is the recommended flow and is used by default.

The `userPassword` flow sends user credentials to the backend without applying SRP encryption. This flow is useful when migrating users to Cognito using the "Migration" trigger, as it allows users to verify their credentials without resetting their passwords.

The `customWithSRP` and `customWithoutSRP` flows allow for custom challenge types, such as CAPTCHAs or dynamic challenge questions, in addition to a password. These flows can be used to meet specific requirements and can be initiated by calling `signIn` with the corresponding auth flow type.

The `userAuth` flow is a choice-based authentication flow that allows users to choose from available authentication methods, such as `emailOTP`, `smsOTP`, `webAuthn`, `password`, or `passwordSRP`. This flow is useful when providing users with the option to choose their authentication method.

To switch between authentication flows, you can configure the flow in the `amplify_outputs.json` file or pass the `authFlowType` as a runtime parameter to the `signIn` API call. Runtime configuration takes precedence over any auth flow type configuration present in `amplify_outputs.json`.

Here's an example of how to initiate a custom authentication flow in React:
```javascript
import { Amplify, Auth } from 'aws-amplify';

//...

const signIn = async () => {
  try {
    const result = await Auth.signIn({
      username: 'username',
      password: 'password',
      options: {
        authFlowType: 'CUSTOM_WITH_SRP',
      },
    });
    // Handle the result
  } catch (error) {
    // Handle the error
  }
};
```
For the `userAuth` flow, you can provide the user with a list of available authentication methods and allow them to choose their preferred method. Here's an example:
```javascript
import { Amplify, Auth } from 'aws-amplify';

//...

const signIn = async () => {
  try {
    const result = await Auth.signIn({
      username: 'username',
      options: {
        authFlowType: 'USER_AUTH',
      },
    });
    // Handle the result, which may include a list of available authentication methods
  } catch (error) {
    // Handle the error
  }
};
```
You can then use the `confirmSignIn` API to complete the sign-in process with the user's chosen authentication method.

In terms of migrating users with Amazon Cognito, you can use the "Migration" trigger to migrate users from an existing user directory into Cognito. This trigger invokes a Lambda function that validates user credentials against the existing directory and returns a response object containing user attributes and status on success.

For custom authentication flows, you need to implement three Lambda triggers for Amazon Cognito: `defineAuthChallenge`, `createAuthChallenge`, and `verifyAuthChallengeResponse`. These triggers allow you to define custom challenge types and verify user responses to these challenges.

Overall, AWS Amplify provides a flexible and customizable authentication system that can meet various use cases and requirements. By choosing the right authentication flow and configuring it appropriately, you can provide a secure and user-friendly authentication experience for your users.