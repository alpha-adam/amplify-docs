Amplify supports the use of passwordless authentication flows using the following methods: 
- SMS-based one-time password (SMS OTP)
- Email-based one-time password (Email OTP)
- WebAuthn passkey

Passwordless authentication removes the security risks and user friction associated with traditional passwords.

**Important Note:** Passwordless configuration is currently not available in defineAuth. We are currently working towards enabling support for passwordless configurations.

To implement passwordless sign-in flows, you need to override the Cognito UserPool to enable the sign-in methods. 

### SMS OTP

SMS-based authentication uses phone numbers as the identifier and text messages as the verification channel. Here's how it works: 
1. The user enters their phone number to sign up or sign in
2. They receive a text message with a time-limited code
3. After the user enters their code, they are authenticated

To use SMS-based one-time password, your Amazon Cognito user pool needs to be configured to use Amazon Simple Notification Service (SNS) to send text messages. 

### Email OTP

Email-based authentication uses email addresses for identification and verification. Here's how it works: 
1. The user enters their email address to sign up or sign in
2. They receive an email message with a time-limited code
3. After the user enters their code, they are authenticated

To use email-based one-time password, your Amazon Cognito user pool needs to be configured to use Amazon Simple Email Service (SES) to send email messages. 

### WebAuthn Passkey

WebAuthn uses biometrics or security keys for authentication, leveraging device-specific security features. Here's how it works: 
1. The user chooses to register a passkey
2. Their device prompts for biometric or security key verification
3. For future logins, they authenticate using the same method

To learn more about using WebAuthn passkeys, SMS OTP, and Email OTP in your React application code, you can visit the relevant documentation pages. Additionally, you can learn more about managing WebAuthn credentials. 

For example, to use SMS OTP in a React application, you would typically use the `Auth` class from `@aws-amplify/auth` to send a verification code to the user's phone number, and then use the `Auth` class again to confirm the verification code. 

```javascript
import { Auth } from '@aws-amplify/auth';

// Send a verification code to the user's phone number
Auth.sendCustomAuthorizer demographics = { phoneNumber: '+1234567890' })
 .then(data => console.log(data))
 .catch(err => console.log(err));

// Confirm the verification code
Auth.confirmSignUp('username', 'verificationCode')
 .then(data => console.log(data))
 .catch(err => console.log(err));
```