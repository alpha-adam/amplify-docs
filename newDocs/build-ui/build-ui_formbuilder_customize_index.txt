To customize the form inputs generated by Amplify, you can override properties of individual input components. The generated form provides a mechanism to override properties for each input component, such as TextField, TextAreaField, and SelectField. You can override any props to those components with the `overrides` prop on the form component.

For example, if you want to change the variation and label of the `content` field in the TodoCreateForm, you can do so like this:
```jsx
<TodoCreateForm
  overrides={{
    content: {
      variation: 'quiet',
      label: 'Todo'
    }
  }}
/>
```
It's not recommended to override properties that are already set by the generated form, as this could lead to unexpected behavior during runtime. You can verify the set properties by navigating to the component in the `src/ui-components/[your-form-component].jsx` file.

To customize the form, you can manually add a form input field connected to a data model. For example, let's say you add a `priority` field to your data model. You can make the following edits to the generated form:
```jsx
const initialValues = {
  content: "",
  priority: ""
};

const [priority, setPriority] = React.useState(initialValues.priority);

const resetStateValues = () => {
  setPriority(initialValues.priority)
  setErrors({});
};

const validations = {
  content: [],
  priority: []
};

const onSubmit = async (event) => {
  event.preventDefault();
  let modelFields = {
    content: content,
    priority: priority
  };
  // submit the form
};

// Add TextField
<TextField
  label="Priority"
  isRequired={false}
  isReadOnly={false}
  value={priority}
  onChange={(e) => {
    let { value } = e.target;
    setPriority(value);
  }}
  onBlur={() => runValidationTasks("priority", priority)}
  errorMessage={errors.priority?.errorMessage}
  hasError={errors.priority?.hasError}
  {...getOverrideProps(overrides, "priority")}
/>
```
You can also manually add option fields, such as Select Fields, Radio Group Fields, and Autocomplete Fields, by replacing the `<TextField>` with the respective component.

To configure form spacings, you can add spacing to your form and between inputs using the `overrides` prop.
```jsx
<TodoCreateForm overrides={{
  TodoCreateForm: {
    rowGap: 'xl',
    columnGap: 'xs',
    padding: 'xl'
  }
}} />
```
You can customize the label for Submit and Clear buttons using the `overrides` prop.
```jsx
<TodoCreateForm overrides={{
  ClearButton: {
    children: 'Close'
  },
  SubmitButton: {
    children: 'Save todo'
  }
}} />
```
You can also toggle the visibility of action buttons using the `overrides` prop.
```jsx
<TodoCreateForm overrides={{
  ClearButton: {
    display: 'none'
  },
  SubmitButton: {
    display: 'none'
  }
}} />
```
If you hide all form action buttons, you can still manage the form lifecycle using the `onChange` event handler.
```jsx
<TodoCreateForm
  onChange={(fields) => {
    console.log({ fields })
    return fields
  }}
/>
```