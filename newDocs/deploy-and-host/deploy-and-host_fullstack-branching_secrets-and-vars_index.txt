Amplify Gen 2 offers centralized management of secrets and environment variables for all fullstack branches. Secrets allow you to securely configure environment-specific values like social sign-in keys, function environment variables, function secrets, and other sensitive data needed by your application across environments.

This is different from Amplify Gen 1, where you need to define environment variables and secrets using the CLI and store keys in both AWS Parameter Store and a local team-provider.json file. In Amplify Gen 2, the management of secrets and environment variables is centralized in the Amplify console.

To set secrets, you can add them for branch deployments in the Amplify console. From the App home page, navigate to Hosting > Secrets, and then choose the Manage secrets button. You can add a secret key or value that applies to all deployed branches or just specific branches. Secrets are stored in AWS Systems Manager Parameter Store.

For local environments, you can add secrets while running the cloud sandbox with the command npx ampx sandbox secret set foo. Secrets set in a sandbox do not show up in the Amplify console, but you can view them in the AWS Parameter Store console.

To access secrets, you can call the secret() function in your code. For example, you can set up social sign-in with authentication in your app using the secret() function. Depending on your environment, Amplify will automatically load the correct secret value with no extra configuration.

To remove secrets, you need to manually delete them. For branch environments, secrets can be managed directly in the Amplify console. For local environments, you can remove a secret with the command npx ampx sandbox secret remove foo.

Environment variables work like key-value pairs to help manage configurable settings across different deployment environments. Unlike secrets, environment variables are typically nonconfidential and are used for controlling application behavior in different environments. Environment variables are stored and managed by the Amplify managed service.

To set environment variables, you can set them in the Amplify console. To access environment variables, you can enable access to them for your fullstack branch deployments or your local dev server. For branch environments, you can manage environment variables through the Amplify console. For local environments, you must manually load the sandbox's environment variables.

For example, you can create an environment variable in the Amplify console and update the build settings to pipe the environment variable into a file, such as an.env file. You can then access the environment variable in your client code using process.env.

Here is an example of how you can write the environment variable to an.env file in your amplify.yml file:
```
build:
  commands:
    - echo "REACT_APP_TEST_VARIABLE=$REACT_APP_TEST_VARIABLE" >>.env
    - npm run build
```
You can then access the environment variable in your client code using process.env:
```typescript
console.log('REACT_APP_TEST_VARIABLE', process.env.REACT_APP_TEST_VARIABLE);
```