To configure and consume environment variables and secrets in AWS Amplify Gen 2, you can use the `environment` property of `defineFunction`. Environment variables can be set using this property, and they will be available to the function at runtime. 

However, do not store secret values in environment variables, as they are rendered in plaintext to the build artifacts and may be emitted to CloudFormation stack event messages. Instead, use the `secret` function to reference a secret value that has been defined separately.

To access environment variables within your function handler, you can use the `process.env` global object provided by the Node runtime. Alternatively, you can use the `env` symbol generated by Amplify, which provides typings for all variables that will be available at runtime.

To use the `env` symbol, you need to import it from `$amplify/env/<function-name>`. If you created your project with `create-amplify`, then Amplify has already set up your project to use the `env` symbol. Otherwise, you need to manually configure your project by adding a `paths` compiler option to your `amplify/tsconfig.json` file.

Here is an example of how to define a function with environment variables and secrets:

```javascript
import { defineFunction, secret } from '@aws-amplify/backend';

export const sayHello = defineFunction({
  environment: {
    NAME: "World",
    API_ENDPOINT: process.env.API_ENDPOINT,
    API_KEY: secret('MY_API_KEY') 
  }
});
```

And here is an example of how to access environment variables and secrets within your function handler:

```javascript
import { env } from '$amplify/env/say-hello';

export const handler = async (event) => {
  const request = new Request(env.API_ENDPOINT, {
    headers: {
      Authorization: `Bearer ${env.API_KEY}`
    }
  })
  //...
  return `Hello, ${env.NAME}!`;
};
```

Note that environment variables and secrets configuration in `defineFunction` is not supported for Custom Functions. Also, be aware that generated files are created before deployments when executing `ampx sandbox` or `ampx pipeline-deploy`. If you encounter issues with the generated file, you can visit the troubleshooting guide for `Cannot find module $amplify/env/<function-name>`.